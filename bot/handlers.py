import random
from telegram import Update
from telegram.ext import ContextTypes


from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from bot.utils import get_main_menu, get_main_menu_button, get_user
from bot.models import add_word_to_db, delete_word_from_db, get_user_words

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
user_states = {}

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.message.chat_id
    username = update.message.chat.username or f"User_{telegram_id}"

    user, created = await get_user(telegram_id, username)
    if created:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–∞—é—â–µ–≥–æ –±–æ—Ç–∞! üìö\n\n"
            "üìñ **–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å –∑–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.**\n\n"
            "–¢—ã –º–æ–∂–µ—à—å:\n"
            "- –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–≤–æ–π –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.\n"
            "- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.\n"
            "- –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞.\n"
            "- –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.\n\n"
            "üîΩ –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            reply_markup=get_main_menu()
        )
    else:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–∞—é—â–µ–≥–æ –±–æ—Ç–∞! üìö\n\n"
            "üìñ **–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å –∑–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.**\n\n"
            "–¢—ã –º–æ–∂–µ—à—å:\n"
            "- –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–≤–æ–π –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.\n"
            "- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.\n"
            "- –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞.\n"
            "- –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.\n\n"
            "üîΩ –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            reply_markup=get_main_menu())


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "main_menu":
        user_states.pop(query.message.chat_id, None)
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

    elif query.data == "learn_words":
        await start_learning(update, context)

    elif query.data == "add_word":
        user_states[query.message.chat_id] = {"state": "adding"}
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ - —Ä—É—Å—Å–∫–∏–π - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è':", reply_markup=get_main_menu_button())

    elif query.data == "my_words":
        words = await get_user_words(query.message.chat_id)
        if words:
            word_list = "\n".join([
                f"{w.english_word} - {w.russian_word}" + (f" - {w.transcription}" if w.transcription else "")
                for w in words
            ])
            total_words = len(words)
            await query.message.reply_text(
                f"–í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n{word_list}\n\nüìä –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {total_words}",
                reply_markup=get_main_menu()
            )
        else:
            await query.message.reply_text("–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç.")

    elif query.data == "delete_word":
        user_states[query.message.chat_id] = {"state": "deleting"}
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º):")

    elif query.data == "finish_learning":  # –ù–æ–≤—ã–π –∫–µ–π—Å
        await finish_learning(update, context)

    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.message.chat_id
    text = update.message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è
    if telegram_id in user_states and user_states[telegram_id].get("state") == "learning":
        await continue_learning(update, context)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤
    if telegram_id in user_states and user_states[telegram_id].get("state") == "deleting":
        await delete_word_from_db(telegram_id, text, update)
        user_states.pop(telegram_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    if telegram_id in user_states and user_states[telegram_id].get("state") == "adding":
        await add_word_to_db(telegram_id, text, update)
        user_states.pop(telegram_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    await update.message.reply_text(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
        reply_markup=get_main_menu()
    )


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ
async def start_learning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from dict.models import Word
    from asgiref.sync import sync_to_async

    telegram_id = update.callback_query.message.chat_id
    user, _ = await get_user(telegram_id)

    words = await sync_to_async(list)(Word.objects.filter(user_id=user.id))
    if not words:
        await update.callback_query.message.reply_text(
            "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è.",
            reply_markup=get_main_menu_button()
        )
        return

    random.shuffle(words)
    user_states[telegram_id] = {
        "state": "learning",
        "words": words,
        "correct": 0,
        "incorrect": 0,
        "incorrect_pairs": []
    }

    current_word = words.pop()
    user_states[telegram_id]["current_word"] = current_word

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="finish_learning")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    message = f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ '{current_word.english_word}'"
    if current_word.transcription:
        message += f" [{current_word.transcription}]"

    await update.callback_query.message.reply_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def finish_learning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º telegram_id –∏–∑ callback_query
    if update.callback_query:
        telegram_id = update.callback_query.message.chat_id
    else:
        telegram_id = update.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = user_states.pop(telegram_id, None)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è
    if not user_state or user_state.get("state") != "learning":
        await update.callback_query.message.reply_text(
            "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è.",
            reply_markup=get_main_menu_button()
        )
        return

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    correct = user_state["correct"]
    incorrect = user_state["incorrect"]
    incorrect_pairs = user_state["incorrect_pairs"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_message = f"–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
    result_message += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n"
    result_message += f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect}\n\n"

    if incorrect_pairs:
        result_message += "–û—à–∏–±–∫–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã):\n"
        for eng, correct_translation in incorrect_pairs:
            result_message += f"- {eng} ‚Üí {correct_translation}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await update.callback_query.message.reply_text(
        result_message,
        reply_markup=get_main_menu()
    )


async def continue_learning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.message.chat_id
    user_state = user_states.get(telegram_id)

    if not user_state or user_state.get("state") != "learning":
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è.",
                                        reply_markup=get_main_menu_button())
        return

    current_word = user_state["current_word"]
    user_answer = update.message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if user_answer == current_word.russian_word.lower():
        user_state["correct"] += 1
        await update.message.reply_text("–í–µ—Ä–Ω–æ! üéâ")
    else:
        user_state["incorrect"] += 1
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É (–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥)
        user_state["incorrect_pairs"].append((current_word.english_word, current_word.russian_word))
        await update.message.reply_text(
            f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '{current_word.english_word}'. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{current_word.russian_word}'."
        )

    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    correct = user_state["correct"]
    incorrect = user_state["incorrect"]
    await update.message.reply_text(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {correct}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {incorrect}.")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
    if user_state["words"]:
        next_word = user_state["words"].pop(0)
        user_state["current_word"] = next_word

        message = f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ '{next_word.english_word}'"
        if next_word.transcription:
            message += f" [{next_word.transcription}]"

        await update.message.reply_text(message)
    else:
        # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã
        await finish_learning(update, context)
